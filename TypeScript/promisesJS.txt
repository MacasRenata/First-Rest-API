                                      |||||| O que é uma promisesJS? ||||||||||


A idéia central por trás das promessas é que uma promessa representa o resultado de uma operação assíncrona. Uma promessa está em um dos três estados diferentes:

pendente - O estado inicial de uma promessa.
fulfilled - O estado de uma promessa que representa uma operação bem-sucedida.
rejeitado - O estado de uma promessa que representa uma operação com falha.


Quando uma promessa é cumprida ou rejeitada, ela é imutável (isto é, nunca pode mudar de novo).




                             +++++++++++++Construindo uma promessa++++++++++++++++++++++++++++++

Uma vez que todas as APIs retornam promessas, deve ser relativamente raro que você precise construir uma à mão. Enquanto isso, precisamos de uma maneira de preencher as APIs existentes. Por exemplo:


function readFile(filename, enc){
  return new Promise(function (fulfill, reject){
    fs.readFile(filename, enc, function (err, res){
      if (err) reject(err);
      else fulfill(res);
    });
  });
}


Nós usamos new Promisepara construir a promessa. Damos ao construtor uma função de fábrica que faz o trabalho real. Essa função é chamada imediatamente com dois argumentos. O primeiro argumento cumpre a promessa e o segundo argumento rejeita a promessa. Quando a operação estiver concluída, chamamos a função apropriada.




                   +++++++++++++++++++++++++++++++++Aguardando uma promessa++++++++++++++++++++++++++

Para usar uma promessa, devemos de alguma forma esperar que ela seja cumprida ou rejeitada. A maneira de fazer isso é usando promise.done(consulte o aviso no final desta seção se estiver tentando executar essas amostras).

Com isso em mente, é fácil reescrever nossa readJSON função anterior para usar promessas:



function readJSON(filename){
  return new Promise(function (fulfill, reject){
    readFile(filename, 'utf8').done(function (res){
      try {
        fulfill(JSON.parse(res));
      } catch (ex) {
        reject(ex);
      }
    }, reject);
  });
}



Isso ainda tem muito código de tratamento de erros (veremos como podemos melhorar isso na próxima seção), mas é muito menos propenso a erros e não temos mais um parâmetro extra estranho.




            +++++++++++++++++++++++++++++++++++Não padrão+++++++++++++++++++++++++++++++++++++++

Observe que promise.done(usado nos exemplos desta seção) não foi padronizado. Ele é apoiado pela maioria das grandes bibliotecas promissoras, e é útil tanto como auxiliar de ensino quanto no código de produção. Eu recomendo usá-lo junto com o seguinte polyfill ( minified / unminified ):


<script src="https://www.promisejs.org/polyfills/promise-done-7.0.4.min.js"></script>





              +++++++++++++++++++++++++++++Transformação / Encadeamento++++++++++++++++++++++++++++++++++

Seguindo nosso exemplo, o que realmente queremos fazer é transformar a promessa por meio de outra operação. Em nosso caso, essa segunda operação é síncrona, mas pode facilmente ter sido uma operação assíncrona. Felizmente, as promessas têm um método (totalmente padronizado, exceto o jQuery ) para transformar promessas e encadear operações.

Simplificando, .thené .donecomo .mapé para .forEach. Para colocar de outra forma, use .thensempre que você for fazer algo com o resultado (mesmo que esteja apenas esperando que ele termine) e use .done sempre que você não estiver planejando fazer nada com o resultado.

Agora podemos reescrever nosso exemplo original de forma simples:

function readJSON(filename){
  return readFile(filename, 'utf8').then(function (res){
    return JSON.parse(res);
  });
}


Como JSON.parseé apenas uma função, poderíamos reescrever isso como:

function readJSON(filename){
  return readFile(filename, 'utf8').then(JSON.parse);
}



Isso é muito próximo do simples exemplo síncrono com o qual começamos.





                        +++++++++++++++++++++Implementações / Polyfills++++++++++++++++++++++++

 Promessas são úteis tanto no node.js quanto no navegador



                                       +++jQuery+++++

Esse é um bom momento para avisá-lo de que o que o jQuery chama de promessa é, na verdade, totalmente diferente do que todo mundo chama de promessa. As promessas do jQuery têm uma API mal pensada que provavelmente irá confundir você. Felizmente, em vez de usar a versão estranha de uma promessa do jQuery, você pode convertê-la em uma promessa padronizada realmente simples:

var jQueryPromise = $.ajax('/data.json');
var realPromise = Promise.resolve(jQueryPromise);
//now just use `realPromise` however you like.




                                    ++++Navegador+++

No momento, as promessas são suportadas apenas por uma pequena seleção de navegadores ( consulte as tabelas de compatibilidade kangax ). A boa notícia é que eles são extremamente fáceis de polimerizar ( minificados / não- minificados ):

<script src="https://www.promisejs.org/polyfills/promise-7.0.4.min.js"></script>


Nenhum dos navegadores atualmente suporta, Promise.prototype.done portanto, se você quiser usar esse recurso, e você não está incluindo o polyfill acima, você deve incluir pelo menos este polyfill ( minified / unminified ):

<script src="https://www.promisejs.org/polyfills/promise-done-7.0.4.min.js"></script>




                                 +++++Node.js++++++

Geralmente, não é visto como uma boa prática polifilar as coisas em node.js. Em vez disso, é melhor você exigir a biblioteca sempre que precisar.

                Para instalar a execução da promessa :

                npm install promise



Então você pode carregá-lo em uma variável local usando require

                 var Promise = require('promise');

A biblioteca "promise" também fornece algumas extensões realmente úteis para interagir com node.js



var readFile = Promise.denodeify(require('fs').readFile);
// now `readFile` will return a promise rather than
// expecting a callback

function readJSON(filename, callback){
  // If a callback is provided, call it with error as the
  // first argument and result as the second argument,
  // then return `undefined`. If no callback is provided,
  // just return the promise.
  return readFile(filename, 'utf8')
    .then(JSON.parse)
    .nodeify(callback);
}